-- First check if the resumes table exists
DO $$
DECLARE 
  table_exists BOOLEAN;
BEGIN
  SELECT EXISTS (
    SELECT FROM information_schema.tables 
    WHERE table_schema = 'public' 
    AND table_name = 'resumes'
  ) INTO table_exists;
  
  -- Only create table if it doesn't exist
  IF NOT table_exists THEN
    CREATE TABLE public.resumes (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
      title TEXT NOT NULL,
      content JSONB NOT NULL,
      template TEXT NOT NULL DEFAULT 'modern',
      last_edited TIMESTAMP WITH TIME ZONE DEFAULT now(),
      created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
      updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()
    );
  ELSE
    -- Check if last_edited column exists and add it if missing
    IF NOT EXISTS (
      SELECT FROM information_schema.columns
      WHERE table_schema = 'public'
      AND table_name = 'resumes'
      AND column_name = 'last_edited'
    ) THEN
      ALTER TABLE public.resumes ADD COLUMN last_edited TIMESTAMP WITH TIME ZONE DEFAULT now();
    END IF;
    
    -- Check other columns and add if missing
    IF NOT EXISTS (
      SELECT FROM information_schema.columns
      WHERE table_schema = 'public'
      AND table_name = 'resumes'
      AND column_name = 'updated_at'
    ) THEN
      ALTER TABLE public.resumes ADD COLUMN updated_at TIMESTAMP WITH TIME ZONE DEFAULT now();
    END IF;
    
    IF NOT EXISTS (
      SELECT FROM information_schema.columns
      WHERE table_schema = 'public'
      AND table_name = 'resumes'
      AND column_name = 'template'
    ) THEN
      ALTER TABLE public.resumes ADD COLUMN template TEXT NOT NULL DEFAULT 'modern';
    END IF;
  END IF;
END
$$;

-- Add appropriate indexes
CREATE INDEX IF NOT EXISTS resumes_user_id_idx ON public.resumes(user_id);

-- Create resume_raw_content table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.resume_raw_content (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  resume_id UUID NOT NULL REFERENCES public.resumes(id) ON DELETE CASCADE,
  user_id UUID NOT NULL,
  raw_content TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Add appropriate indexes
CREATE INDEX IF NOT EXISTS resume_raw_content_resume_id_idx ON public.resume_raw_content(resume_id);
CREATE INDEX IF NOT EXISTS resume_raw_content_user_id_idx ON public.resume_raw_content(user_id);

-- Create bucket for resume files if it doesn't exist (uncomment if you have bucket admin permissions)
-- BEGIN
--   IF NOT EXISTS (
--     SELECT 1 FROM storage.buckets WHERE name = 'resumes'
--   ) THEN
--     EXECUTE format('
--       CREATE BUCKET IF NOT EXISTS "resumes"
--       WITH (public = false);
--     ');
--   END IF;
-- END;

-- Set up Row Level Security (RLS) policies
ALTER TABLE public.resumes ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.resume_raw_content ENABLE ROW LEVEL SECURITY;

-- Create policies that allow users to only see and modify their own data
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE tablename = 'resumes' AND policyname = 'Users can view their own resumes'
  ) THEN
    CREATE POLICY "Users can view their own resumes"
      ON public.resumes
      FOR SELECT
      USING (auth.uid() = user_id);
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE tablename = 'resumes' AND policyname = 'Users can insert their own resumes'
  ) THEN
    CREATE POLICY "Users can insert their own resumes"
      ON public.resumes
      FOR INSERT
      WITH CHECK (auth.uid() = user_id);
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE tablename = 'resumes' AND policyname = 'Users can update their own resumes'
  ) THEN
    CREATE POLICY "Users can update their own resumes"
      ON public.resumes
      FOR UPDATE
      USING (auth.uid() = user_id);
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE tablename = 'resumes' AND policyname = 'Users can delete their own resumes'
  ) THEN
    CREATE POLICY "Users can delete their own resumes"
      ON public.resumes
      FOR DELETE
      USING (auth.uid() = user_id);
  END IF;

  -- Policies for resume_raw_content
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE tablename = 'resume_raw_content' AND policyname = 'Users can view their own resume content'
  ) THEN
    CREATE POLICY "Users can view their own resume content"
      ON public.resume_raw_content
      FOR SELECT
      USING (auth.uid() = user_id);
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE tablename = 'resume_raw_content' AND policyname = 'Users can insert their own resume content'
  ) THEN
    CREATE POLICY "Users can insert their own resume content"
      ON public.resume_raw_content
      FOR INSERT
      WITH CHECK (auth.uid() = user_id);
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE tablename = 'resume_raw_content' AND policyname = 'Users can update their own resume content'
  ) THEN
    CREATE POLICY "Users can update their own resume content"
      ON public.resume_raw_content
      FOR UPDATE
      USING (auth.uid() = user_id);
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE tablename = 'resume_raw_content' AND policyname = 'Users can delete their own resume content'
  ) THEN
    CREATE POLICY "Users can delete their own resume content"
      ON public.resume_raw_content
      FOR DELETE
      USING (auth.uid() = user_id);
  END IF;
END
$$;
